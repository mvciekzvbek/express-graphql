scalar DateTime

type User {
    githubLogin: ID!
    name: String
    avatar: String!
    articles: [Article]!
    postedArticles(
        filter: ArticleFilter 
        paging: DataPage 
        sorting:DataSort
    ) : [Article!]
}

type Category {
    id: ID!
    name: String!
    articles: [Article]!
}

type Article {
    id: ID!
    title: String!
    lead: String!
    content: String!
    image: String
    createdBy: Author!
    categories: [Category]!
    created: DateTime!
}

enum SortDirection {
    ASCENDING
    DESCENDING
}

enum SortableArticleField {
    title
    createdBy
    created
}

input ArticleFilter {
    category: Category
    createdBetween: DateRange
    createdBy: Author
    searchText: String
}

input DateRange {
    start: DateTime!
    end: DateTime!
}

input DataPage {
    first: Int = 25
    start: Int = 0
}

input DataSort {
    sort: SortDirection = DESCENDING
    sortBy: SortableArticleField = created
}

type AuthPayload {
    user: User!
    token: String!
}

# Query root type 
type Query {
    totalArticles: Int!
    allArticles(
        filter: ArticleFilter
        paging: DataPage
        sorting: DataSort
        category: Category
        # first: Int = 25
        # start: Int = 0
        # sort: SortDirection = DESCENDING
        # sortBy: SortableArticleField = created
        ): [Article]!
    totalUsers: Int!
    allUsers(
        paging: DataPage
        sorting: DataSort
        ): [User]!
    User(githubLogin: ID!): User!
    Article(id: ID!): Article!
    Category(name: String!): Article!
}

# mutation
input PostArticleInput {
    title: String!
    lead: String!
    content: String!
    image: String
    categories: [Category]!
}

type Mutation {
    postArticle (input: PostArticleInput!): Article!
    githubAuth(code: String!): AuthPayload!
}

# subscription
type Subscription {
    newArticle(category: Category): Article!
    newUser: User!
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
